/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import util.Pletter;
import util.Z80Assembler;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class Hud {
    public static int TOLERANCE = 64;
    
    public static void main(String args[]) throws Exception
    {
        String hudFileName = "data/hud.png";
        String titleFileName = "data/title.png";
        String objectsFileName = "data/objects.png";
        String tutorialFileName = "data/tutorial.png";
        String endingFileName = "data/housemap.png";
        String hudPath_output = "src/autogenerated/";
        
        ConvertPatternsToAssembler.MSX1Palette = Walls.MSX1Palette;
        
        generateData(hudFileName, 0, 0, 32, 7, hudPath_output + "hud");
        generateData(titleFileName, 0, 55, 32, 8, hudPath_output + "title");
        generateDataWithoutNameTable(titleFileName, 0, 34, 8, 2, hudPath_output + "braingames");
        generateData(objectsFileName, 96/8, 144/8, 5, 6, hudPath_output + "pentagram-clue");

        generateData(tutorialFileName, 0, 4, 20, 12, hudPath_output + "tutorial");

        generateData(hudFileName, 0, 7, 8, 3, hudPath_output + "password-lock");

        generateData(endingFileName, 256/8, 64/8, 13, 3, hudPath_output + "ending-scroll");
        generateData(endingFileName, 152/8, 72/8, 12, 12, hudPath_output + "ending-map1");
        generateData(endingFileName, 168/8, 0, 8, 9, hudPath_output + "ending-map2");
        generateData(endingFileName, 160/8, 176/8, 11, 10, hudPath_output + "ending-map3");
        generateData(endingFileName, 248/8, 0, 7, 2, hudPath_output + "ending-the-end");
    }

    
    private static void generateData(
            String hudFileName,
            int startx, int starty,
            int width, int height,
            String outputFileName) throws Exception {
        BufferedImage img = ImageIO.read(new File(hudFileName));
        
        List<Integer> data = new ArrayList<>();        
        List<List<Integer>> tiles = new ArrayList<>();
        int nameTable[][] = new int[width][height];
                
        for(int i = 0;i<height;i++) {
            for(int j = 0;j<width;j++) {
                List<Integer> tileData = new ArrayList<>();
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternBitmap(j+startx, i+starty, img, TOLERANCE));
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternAttributes(j+startx, i+starty, img, TOLERANCE));
                
                int tile = Walls.findTile(tileData, tiles);
                if (tile == -1) {
                    tile = tiles.size();
                    tiles.add(tileData);
                }
                nameTable[j][i] = tile;
                data.add(tile);
                
                System.out.print(tile + "\t");
            }
            System.out.println("");
        }
                        
        // Generate data:
        for(List<Integer> tile:tiles) {
            data.addAll(tile);
        }

        System.out.println("generateHudData, nTiles: " + tiles.size());
        System.out.println("generateHudData, data size: " + data.size());

        
        Z80Assembler.dataToBinary(data, outputFileName+".bin");
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});
        ZX0Wrapper.main(outputFileName+".bin", outputFileName+".zx0", true, false);
    }    

    private static void generateDataWithoutNameTable(
            String letterFileName,
            int startx, int starty,
            int width, int height,
            String outputFileName) throws Exception {
        BufferedImage img = ImageIO.read(new File(letterFileName));
        
        List<Integer> data = new ArrayList<>();        
        List<List<Integer>> tiles = new ArrayList<>();
                
        for(int i = 0;i<height;i++) {
            for(int j = 0;j<width;j++) {
                List<Integer> tileData = new ArrayList<>();
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternBitmap(j+startx, i+starty, img, TOLERANCE));
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternAttributes(j+startx, i+starty, img, TOLERANCE));                
                tiles.add(tileData);
            }
            System.out.println("");
        }
                        
        // Generate data:
        for(List<Integer> tile:tiles) {
            data.addAll(tile);
        }

        System.out.println("generateLetterData, nTiles: " + tiles.size());
        System.out.println("generateLetterData, data size: " + data.size());

        
        Z80Assembler.dataToBinary(data, outputFileName+".bin");
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});
        ZX0Wrapper.main(outputFileName+".bin", outputFileName+".zx0", true, false);
    }  
}
