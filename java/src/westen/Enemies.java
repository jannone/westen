/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import util.Pletter;
import util.Z80Assembler;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class Enemies {
    
    public static int TOLERANCE = 64;
    
    public static void main(String args[]) throws Exception
    {
        String objectsImageFileName = "data/enemies.png";
        String outputFolder = "src/autogenerated/enemies";
        
        BufferedImage img = ImageIO.read(new File(objectsImageFileName));    
        
        generateEnemyData(0, 0, "rat", img, outputFolder);
        generateEnemyData(32, 0, "spider", img, outputFolder);
        generateEnemyData(64, 0, "slime", img, outputFolder);
        generateEnemyData(96, 0, "bat", img, outputFolder);
    }

    
    // Assumes two animation frames
    private static void generateEnemyData(int x, int y, String name, BufferedImage img, String outputFolder) throws Exception
    {
        List<Integer> se_frame1 = getEnemyPixels(x, y, img);
        List<Integer> se_frame2 = getEnemyPixels(x, y+16, img);
        List<Integer> nw_frame1 = getEnemyPixels(x+16, y, img);
        List<Integer> nw_frame2 = getEnemyPixels(x+16, y+16, img);
        
        List<List<Integer>> sprites = new ArrayList<>();

        // Generate all the sprite variants:
        sprites.add(se_frame1);
        sprites.add(se_frame2);
        sprites.add(nw_frame1);
        sprites.add(nw_frame2);

        /*
        List<Integer> ne_frame1 = flipSprite(nw_frame1);
        sprites.add(ne_frame1);
        sprites.add(shiftSprite(ne_frame1, 2));
        sprites.add(shiftSprite(ne_frame1, 4));
        sprites.add(shiftSprite(ne_frame1, 6));
        List<Integer> ne_frame2 = flipSprite(nw_frame2);
        sprites.add(ne_frame2);
        sprites.add(shiftSprite(ne_frame2, 2));
        sprites.add(shiftSprite(ne_frame2, 4));
        sprites.add(shiftSprite(ne_frame2, 6));
        
        sprites.add(se_frame1);
        sprites.add(shiftSprite(se_frame1, 2));
        sprites.add(shiftSprite(se_frame1, 4));
        sprites.add(shiftSprite(se_frame1, 6));
        sprites.add(se_frame2);
        sprites.add(shiftSprite(se_frame2, 2));
        sprites.add(shiftSprite(se_frame2, 4));
        sprites.add(shiftSprite(se_frame2, 6));
        
        List<Integer> sw_frame1 = flipSprite(se_frame1);
        sprites.add(sw_frame1);
        sprites.add(shiftSprite(sw_frame1, 2));
        sprites.add(shiftSprite(sw_frame1, 4));
        sprites.add(shiftSprite(sw_frame1, 6));
        List<Integer> sw_frame2 = flipSprite(se_frame2);
        sprites.add(sw_frame2);
        sprites.add(shiftSprite(sw_frame2, 2));
        sprites.add(shiftSprite(sw_frame2, 4));
        sprites.add(shiftSprite(sw_frame2, 6));
        
        sprites.add(nw_frame1);
        sprites.add(shiftSprite(nw_frame1, 2));
        sprites.add(shiftSprite(nw_frame1, 4));
        sprites.add(shiftSprite(nw_frame1, 6));
        sprites.add(nw_frame2);
        sprites.add(shiftSprite(nw_frame2, 2));
        sprites.add(shiftSprite(nw_frame2, 4));
        sprites.add(shiftSprite(nw_frame2, 6));
        */
        
        // Encode all sprites as data:
        List<Integer> data = new ArrayList<>();
        for(List<Integer> sprite:sprites) {
            spriteToBytes(sprite, data);
        }
        
        String outputFileName = outputFolder + "/" + name;
        Z80Assembler.dataToBinary(data, outputFileName+".bin");    
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});
        ZX0Wrapper.main(outputFileName+".bin", outputFileName+".zx0", true, false);        
    }
    
    
    public static void spriteToBytes(List<Integer> sprite, List<Integer> data)
    {
        int width = 16;
        if (sprite.size() == 16*24) width = 24;
        for(int jj = 0;jj<3;jj++) {
            for(int i = 0;i<16;i++) {
                int pattern = 0;
                int mask = 0;
                for(int j = 0;j<8;j++) {
                    int x = jj*8+j;
                    int pixel = (x>=width ? -1 : sprite.get(i*width + jj*8+j));
                    pattern *= 2;
                    mask *= 2;
                    if (pixel == -1) {
                        mask |= 1;
                    } else if (pixel == 15) {
                        pattern |= 1;
                    } else {
                        // black pixel, nothing to do
                    }
                }
                data.add(mask);
                data.add(pattern);
            }
        }
    }
    
    
    public static List<Integer> getEnemyPixels(int x, int y, BufferedImage img)
    {
        List<Integer> pixels = new ArrayList<>();
        
        for(int i = 0;i<16;i++) {
            for(int j = 0;j<16;j++) {
                int pixel = ConvertPatternsToAssembler.findMSXColor(x+j, y+i, img, TOLERANCE);
                pixels.add(pixel);
            }
        }
        return pixels;
    }
    
    
    // Input is a 16x16 sprite, output is a 24x16 sprite:
    public static List<Integer> shiftSprite(List<Integer> pixels, int x_offset)
    {
        List<Integer> pixels2 = new ArrayList<>();
        for(int i = 0;i<16;i++) {
            for(int j = 0;j<24;j++) {
                if (j<x_offset) {
                    pixels2.add(-1);
                } else if (j<x_offset+16) {
                    pixels2.add(pixels.get(i*16+j-x_offset));
                } else {
                    pixels2.add(-1);
                }
            }
        }
        
        return pixels2;
    }
    
    
    public static List<Integer> flipSprite(List<Integer> pixels)
    {
        List<Integer> pixels2 = new ArrayList<>();
        for(int i = 0;i<16;i++) {
            for(int j = 0;j<16;j++) {
                pixels2.add(pixels.get(i*16+15-j));
            }
        }
        
        return pixels2;
    }    
}
